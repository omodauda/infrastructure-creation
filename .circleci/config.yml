# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create cloudformation stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:39:04:07:48:73:4e:73:37:fe:21:9b:b8:66:e6:97"]
      - run:
          name: view content of inventory.txt
          command: cat inventory
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and configure server
          command: |
            ansible-playbook -i inventory main.yml

  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://omodauda.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL}
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  # rollback smoke test
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error
          command: return 1
      - destroy_environment

  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides BucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
          
          # COPY ALL CONTENTS OF THE CURRENT DIRECTORY TO THE S3 BUCKET
      - run: aws s3 sync ./s3files s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old bucket name responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`BucketName\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - run: cat ~/textfile.txt
      - run:
          name: print old bucket name
          command: echo cat ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides BucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous s3 bucket
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my_workflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test:
      #     requires:
      #       - create_infrastructure
      - create_and_deploy_front_end
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
